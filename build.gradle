// create a runnable jar with jar dependencies stored in lib subdirectory
tasks.whenTaskAdded { task ->
    ['startScripts', 'distTar'].each { String skipTaskName ->
        if (task.name.contains(skipTaskName)) {
            task.enabled = false
        }
    }
}
apply plugin: 'java'
apply plugin: 'application'

// JDK 8
sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = 'edu.mcw.rgd.pipelines.imexinteractions.Manager'
String myAppName = 'IMEXInteractionsPipeline'

project.archivesBaseName = myAppName

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.commons:commons-compress:1.21'
    implementation 'org.apache.commons:commons-dbcp2:2.9.0'
    implementation 'commons-net:commons-net:3.9.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'com.oracle.database.jdbc:ojdbc8:21.1.0.0'
    implementation 'org.springframework:spring-beans:5.3.0'
    implementation 'org.springframework:spring-jdbc:5.3.0'

    implementation fileTree(dir: 'lib', include: '*.jar')
}

/* original dependencies: non-maven central repos don't longer work
   so it is better to include the actual jars

repositories {
    // psicquic specific maven repos
    maven { url "http://www.ebi.ac.uk/intact/maven/nexus/content/repositories/ebi-repo/" }
    maven { url "http://repository.springsource.com/maven/bundles/release" }
    maven { url "http://repository.springsource.com/maven/bundles/external"
}

dependencies {
    // psicquic simple client
    // compile 'org.hupo.psi.mi.psicquic:psicquic-simple-client:1.4.0'  // this does not work
    compile 'org.hupo.psi.mi.psicquic:psicquic-simple-client:1.3.3'

    // jami mitab parser
    compile 'psidev.psi.mi.jami:jami-mitab:1.1.4'
    compile 'psidev.psi.mi.jami:jami-commons:1.1.5'
}
*/

jar {
    manifest {
        attributes(
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version'),
            'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
            'Main-Class': mainClassName
        )
    }
}

distributions {
    main {
        distributionBaseName = myAppName
    }
}

task createDistro(type: Copy) {
    def zipFile = file('build/distributions/'+myAppName+'.zip')
    def outputDir = file("build/install")

    from zipTree(zipFile)
    into outputDir
}
createDistro.dependsOn assembleDist
