// create a runnable jar with jar dependencies stored in lib subdirectory
tasks.whenTaskAdded { task ->
    ['startScripts', 'distTar'].each { String skipTaskName ->
        if (task.name.contains(skipTaskName)) {
            task.enabled = false
        }
    }
}
apply plugin: 'java'
apply plugin: 'application'

// JDK 8
sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = 'edu.mcw.rgd.pipelines.imexinteractions.Manager'
String myAppName = 'IMEXInteractionsPipeline'

repositories {
    mavenCentral()

    // psicquic specific maven repos
    maven { url "http://www.ebi.ac.uk/intact/maven/nexus/content/repositories/ebi-repo/" }
    maven { url "http://repository.springsource.com/maven/bundles/release" }
    maven { url "http://repository.springsource.com/maven/bundles/external" }
}

dependencies {
    compile 'org.apache.commons:commons-compress:1.19'
    compile 'org.apache.commons:commons-dbcp2:2.7.0'
    compile 'commons-net:commons-net:3.6'
    compile 'org.apache.httpcomponents:httpclient:4.5.11'

    compile 'log4j:log4j:1.2.17'
    compile 'com.oracle.ojdbc:ojdbc8:19.3.0.0'
    compile 'org.springframework:spring-beans:5.2.1.RELEASE'
    compile 'org.springframework:spring-jdbc:5.2.1.RELEASE'

    // psicquic simple client
    //compile 'org.hupo.psi.mi.psicquic:psicquic-simple-client:1.4.0'  // this does not work
    compile 'org.hupo.psi.mi.psicquic:psicquic-simple-client:1.3.3'

    // jami mitab parser
    compile 'psidev.psi.mi.jami:jami-mitab:1.1.4'
    compile 'psidev.psi.mi.jami:jami-commons:1.1.5'

    compile fileTree(dir: 'lib', include: '*.jar')
}

jar {
    baseName = myAppName
    manifest {
        attributes(
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version'),
            'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
            'Main-Class': mainClassName
        )
    }
}

distributions {
    main {
        baseName = myAppName
    }
}

task createDistro(type: Copy) {
    def zipFile = file('build/distributions/'+myAppName+'.zip')
    def outputDir = file("build/install")

    from zipTree(zipFile)
    into outputDir
}
createDistro.dependsOn assembleDist
